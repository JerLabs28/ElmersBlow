/// <reference types="node" resolution-mode="require"/>
import { Minimatch } from 'minimatch';
import { Minipass } from 'minipass';
import { FSOption, Path, PathScurry } from 'path-scurry';
import { IgnoreLike } from './ignore.js';
import { Pattern } from './pattern.js';
export type MatchSet = Minimatch['set'];
export type GlobParts = Exclude<Minimatch['globParts'], undefined>;
/**
 * A `GlobOptions` object may be provided to any of the exported methods, and
 * must be provided to the `Glob` constructor.
 *
 * All options are optional, boolean, and false by default, unless otherwise
 * noted.
 *
 * All resolved options are added to the Glob object as properties.
 *
 * If you are running many `glob` operations, you can pass a Glob object as the
 * `options` argument to a subsequent operation to share the previously loaded
 * cache.
 */
export interface GlobOptions {
    /**
     * Set to `true` to always receive absolute paths for
     * matched files. Set to `false` to always return relative paths.
     *
     * When this option is not set, absolute paths are returned for patterns
     * that are absolute, and otherwise paths are returned that are relative
     * to the `cwd` setting.
     *
     * This does _not_ make an extra system call to get
     * the realpath, it only does string path resolution.
     *
     * Conflicts with {@link withFileTypes}
     */
    absolute?: boolean;
    /**
     * Set to false to enable {@link windowsPathsNoEscape}
     *
     * @deprecated
     */
    allowWindowsEscape?: boolean;
    /**
     * The current working directory in which to search. Defaults to
     * `process.cwd()`.
     *
     * May be eiher a string path or a `file://` URL object or string.
     */
    cwd?: string | URL;
    /**
     * Include `.dot` files in normal matches and `globstar`
     * matches. Note that an explicit dot in a portion of the pattern
     * will always match dot files.
     */
    dot?: boolean;
    /**
     * Prepend all relative path strings with `./` (or `.\` on Windows).
     *
     * Without this option, returned relative paths are "bare", so instead of
     * returning `'./foo/bar'`, they are returned as `'foo/bar'`.
     *
     * Relative patterns starting with `'../'` are not prepended with `./`, even
     * if this option is set.
     */
    dotRelative?: boolean;
    /**
     * Follow symlinked directories when expanding `**`
     * patterns. This can result in a lot of duplicate references in
     * the presence of cyclic links, and make performance quite bad.
     *
     * By default, a `**` in a pattern will follow 1 symbolic link if
     * it is not the first item in the pattern, or none if it is the
     * first item in the pattern, following the same behavior as Bash.
     */
    follow?: boolean;
    /**
     * string or string[], or an object with `ignore` and `ignoreChildren`
     * methods.
     *
     * If a string or string[] is provided, then this is treated as a glob
     * pattern or array of glob patterns to exclude from matches. To ignore all
     * children within a directory, as well as the entry itself, append `'/**'`
     * to the ignore pattern.
     *
     * **Note** `ignore` patterns are _always_ in `dot:true` mode, regardless of
     * any other settings.
     *
     * If an object is provided that has `ignored(path)` and/or
     * `childrenIgnored(path)` methods, then these methods will be called to
     * determine whether any Path is a match or if its children should be
     * traversed, respectively.
     */
    ignore?: string | string[] | IgnoreLike;
    /**
     * Treat brace expansion like `{a,b}` as a "magic" pattern. Has no
     * effect if {@link nobrace} is set.
     *
     * Only has effect on the {@link hasMagic} function.
     */
    magicalBraces?: boolean;
    /**
     * Add a `/` character to directory matches. Note that this requires
     * additional stat calls in some cases.
     */
    mark?: boolean;
    /**
     * Perform a basename-only match if the pattern does not contain any slash
     * characters. That is, `*.js` would be treated as equivalent to
     * `**\/*.js`, matching all js files in all directories.
     */
    matchBase?: boolean;
    /**
     * Limit the directory traversal to a given depth below the cwd.
     * Note that this does NOT prevent traversal to sibling folders,
     * root patterns, and so on. It only limits the maximum folder depth
     * that the walk will descend, relative to the cwd.
     */
    maxDepth?: number;
    /**
     * Do not expand `{a,b}` and `{1..3}` brace sets.
     */
    nobrace?: boolean;
    /**
     * Perform a case-insensitive match. This defaults to `true` on macOS and
     * Windows systems, and `false` on all others.
     *
     * **Note** `nocase` should only be explicitly set when it is
     * known that the filesystem's case sensitivity differs from the
     * platform default. If set `true` on case-sensitive file
     * systems, or `false` on case-insensitive file systems, then the
     * walk may return more or less results than expected.
     */
    nocase?: boolean;
    /**
     * Do not match directories, only files. (Note: to match
     * _only_ directories, put a `/` at the end of the pattern.)
     */
    nodir?: boolean;
    /**
     * Do not match "extglob" patterns such as `+(a|b)`.
     */
    noext?: boolean;
    /**
     * Do not match `**` against multiple filenames. (Ie, treat it as a normal
     * `*` instead.)
     *
     * Conflicts with {@link matchBase}
     */
    noglobstar?: boolean;
    /**
     * Defaults to value of `process.platform` if available, or `'linux'` if
     * not. Setting `platform:'win32'` on non-Windows systems may cause strange
     * behavior.
     */
    platform?: NodeJS.Platform;
    /**
     * Set to true to call `fs.realpath` on all of the
     * results. In the case of an entry that cannot be resolved, the
     * entry is omitted. This incurs a slight performance penalty, of
     * course, because of the added system calls.
     */
    realpath?: boolean;
    /**
     *
     * A string path resolved against the `cwd` option, which
     * is used as the starting point for absolute patterns that start
     * with `/`, (but not drive letters or UNC paths on Windows).
     *
     * Note that this _doesn't_ necessarily limit the walk to the
     * `root` directory, and doesn't affect the cwd starting point for
     * non-absolute patterns. A pattern containing `..` will still be
     * able to traverse out of the root directory, if it is not an
     * actual root directory on the filesystem, and any non-absolute
     * patterns will be matched in the `cwd`. For example, the
     * pattern `/../*` with `{root:'/some/path'}` will return all
     * files in `/some`, not all files in `/some/path`. The pattern
     * `*` with `{root:'/some/path'}` will return all the entries in
     * the cwd, not the entries in `/some/path`.
     *
     * To start absolute and non-absolute patterns in the same
     * path, you can use `{root:''}`. However, be aware that on
     * Windows systems, a pattern like `x:/*` or `//host/share/*` will
     * _always_ start in the `x:/` or `//host/share` directory,
     * regardless of the `root` setting.
     */
    root?: string;
    /**
     * A [PathScurry](http://npm.im/path-scurry) object used
     * to traverse the file system. If the `nocase` option is set
     * explicitly, then any provided `scurry` object must match this
     * setting.
     */
    scurry?: PathScurry;
    /**
     * Call `lstat()` on all entries, whether required or not to determine
     * if it's a valid match. When used with {@link withFileTypes}, this means
     * that matches will include data such as modified time, permissions, and
     * so on.  Note that this will incur a performance cost due to the added
     * system calls.
     */
    stat?: boolean;
    /**
     * An AbortSignal which will cancel the Glob walk when
     * triggered.
     */
    signal?: AbortSignal;
    /**
     * Use `\\` as a path separator _only_, and
     *  _never_ as an escape character. If set, all `\\` characters are
     *  replaced with `/` in the pattern.
     *
    ityLabel":"Group {conversationName} has been created","ConversationOpenedAccessibilityLabel":"{conversationName} conversation"},"CallMediaCaptureChatMessages":{"Started":"{name} started using a device that could record or broadcast this call.","Stopped":"{name} stopped using a device that could have recorded or broadcast this call."},"CallMediaCapturerToast":{"StopLinkText":"Stop NDI®","NotificationText":"{name} is using a device that could record or broadcast this call.","PrivacyStatementText":"Avoid legal snags by telling people they're being recorded or broadcasted.","MorePrivacyInfoLinkText":"More privacy info","StartedAccessibilityLabel":"{name} started using a device that could record or broadcast this call","StoppedAccessibilityLabel":"{name} stopped using a device that could record or broadcast this call","StartedInitiatorAccessibilityLabel":"Started using NDI®","StoppedInitiatorAccessibilityLabel":"Stopped using NDI®"},"CallRecordingChatMessages":{"StartedRecording":"{name} started recording...","StoppedRecording":"{name} stopped recording"},"CallConnectionQualityToast":{"PoorConnectionTitle":"Poor connection","PoorConnectionAndAudioOnlyEnabledTitle":"Poor connection - audio-only","AudioOnlyTitle":"Audio-only","StartAudioOnlyLinkText":"Switch to audio-only","StopAudioOnlyLinkText":"Allow incoming video"},"IncomingVideoDisabledToast":{"BannerTitle":"Incoming video disabled","ResumeLinkText":"Allow incoming video"},"CallRecorderToast":{"StopRecordingLinkText":"Stop recording","IsRecordingText":"{name} is recording the call","PrivacyStatementText":"Avoid legal snags by telling people they're being recorded.","RecordingInitiatorMorePrivacyInfoLinkText":"More privacy info","MorePrivacyInfoLinkText":"Click here for more privacy info.","StartedRecordingAccessibilityLabel":"{name} started recording","StoppedRecordingAccessibilityLabel":"{name} stopped recording","StartedRecordingInitiatorAccessibilityLabel":"Recording started","StoppedRecordingInitiatorAccessibilityLable":"Recording stopped","StartingRecordingText":"Starting recording..."},"CallSubtitleToast":{"MultipleSpokenLanguageWarningText":"There are multiple spoken language defaults on this call. Select the language spoken on this call:","SpokenLanguageDropdownOptionDefaultText":"Select language"},"TranslationToast":{"TranslationIsOnText":"Translation is on for this conversation. {callTranslationOptionsLink}","TranslationWasTurnedOffText":"Translation was turned off for this conversation. {callTranslationOptionsLink}","CallTranslationOptionsLinkText":"Call translation options"},"MobileScreenSharingToast":{"BannerTitle":"Sharing screen...","StopSharingLinkText":"Stop sharing"},"ChatSettings":{"SkypeConversation":"SKYPE CONVERSATION","E2EEConversation":"PRIVATE CONVERSATION","SMSConversation":"SMS CONVERSATION"},"MrcVideoToast":{"IsSendingMrcText":"Your audio and video will continue to stream until you turn your video off or end the call."},"Plugin":{"Save":"Add","Cancel":"Cancel","CreateTaskTitle":"Create a task","CreateTaskHelpTextPrefix":"Your To-Do will be saved in the","CreateTaskHelpTextSuffix":"Microsoft task service","Saved":"View in Microsoft To-Do","SaveTaskToFolderLabel":"Your task will be saved in '{taskListName}'. You have '{taskListCount}' task lists in total'. ","AddTaskButtonLabel":"Add task to '{taskListName}'"},"Poll":{"Header":"Poll","QuestionTitle":"QUESTION","QuestionPlaceholder":"What's your poll question?","OptionsTitle":"OPTIONS","OptionPlaceholder":"Option {count}","MoreOptionsButtonText":"Add option","ExpirationDateText":"Poll ends at","CreateButtonText":"Create poll","SummaryButtonTextBeforeExpiration":"View details","SummaryButtonTextAfterExpiration":"View results","CreatorText":"{gender, select, female{{creator} sent a poll to {conversationDisplayName}} male{{creator} sent a poll to {conversationDisplayName}} other{{creator} sent a poll to {conversationDisplayName}}}","TotalVoteCounts":"{votedParticipants} of {totalParticipants} people voted to your poll","ResponsesTitle":"RESPONSES","PlaceholderText":"Poll card","StreamItemAccessibi */
    streamSync(): Minipass<Result<Opts>, Result<Opts>>;
    /**
     * Default sync iteration function. Returns a Generator that
     * iterates over the results.
     */
    iterateSync(): Generator<Result<Opts>, void, void>;
    [Symbol.iterator](): Generator<Result<Opts>, void, void>;
    /**
     * Default async iteration function. Returns an AsyncGenerator that
     * iterates over the results.
     */
    iterate(): AsyncGenerator<Result<Opts>, void, void>;
    [Symbol.asyncIterator](): AsyncGenerator<Result<Opts>, void, void>;
}
//# sourceMappingURL=glob.d.ts.map